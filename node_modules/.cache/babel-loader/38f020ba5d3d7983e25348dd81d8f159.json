{"remainingRequest":"/Users/ganlin/Desktop/s1/student/node_modules/babel-loader/lib/index.js!/Users/ganlin/Desktop/s1/student/src/utils/request.js","dependencies":[{"path":"/Users/ganlin/Desktop/s1/student/src/utils/request.js","mtime":1674380397837},{"path":"/Users/ganlin/Desktop/s1/student/node_modules/cache-loader/dist/cjs.js","mtime":1674218876203},{"path":"/Users/ganlin/Desktop/s1/student/node_modules/babel-loader/lib/index.js","mtime":1674219168157}],"contextDependencies":[],"result":["import axios from 'axios';\nvar http = axios.create({\n  baseURL: '',\n  timeout: 1000\n}); // 添加请求拦截器\n\nhttp.interceptors.request.use(function (config) {\n  // 在发送请求之前做些什么\n  return config;\n}, function (error) {\n  // 对请求错误做些什么\n  return Promise.reject(error);\n}); // 添加响应拦截器\n\nhttp.interceptors.response.use(function (response) {\n  // 2xx 范围内的状态码都会触发该函数。\n  // 对响应数据做点什么\n  return response;\n}, function (error) {\n  // 超出 2xx 范围的状态码都会触发该函数。\n  // 对响应错误做点什么\n  return Promise.reject(error);\n});\nexport default http;",{"version":3,"sources":["/Users/ganlin/Desktop/s1/student/src/utils/request.js"],"names":["axios","http","create","baseURL","timeout","interceptors","request","use","config","error","Promise","reject","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAa;AACtBC,EAAAA,OAAO,EAAE,EADa;AAEtBC,EAAAA,OAAO,EAAC;AAFc,CAAb,CAAb,C,CAKA;;AACAH,IAAI,CAACI,YAAL,CAAkBC,OAAlB,CAA0BC,GAA1B,CAA8B,UAAUC,MAAV,EAAkB;AAC5C;AACA,SAAOA,MAAP;AACD,CAHH,EAGK,UAAUC,KAAV,EAAiB;AAClB;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CANH,E,CAQA;;AACAR,IAAI,CAACI,YAAL,CAAkBO,QAAlB,CAA2BL,GAA3B,CAA+B,UAAUK,QAAV,EAAoB;AAC/C;AACA;AACA,SAAOA,QAAP;AACD,CAJH,EAIK,UAAUH,KAAV,EAAiB;AAClB;AACA;AACA,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACD,CARH;AAUA,eAAeR,IAAf","sourcesContent":["import axios from 'axios'\n\nconst http = axios.create({\n    baseURL: '',\n    timeout:1000,\n})\n\n// 添加请求拦截器\nhttp.interceptors.request.use(function (config) {\n    // 在发送请求之前做些什么\n    return config;\n  }, function (error) {\n    // 对请求错误做些什么\n    return Promise.reject(error);\n  });\n\n// 添加响应拦截器\nhttp.interceptors.response.use(function (response) {\n    // 2xx 范围内的状态码都会触发该函数。\n    // 对响应数据做点什么\n    return response;\n  }, function (error) {\n    // 超出 2xx 范围的状态码都会触发该函数。\n    // 对响应错误做点什么\n    return Promise.reject(error);\n  });\n\nexport default http\n\n"]}]}